name: Grid E2E (Terraform → Tests → Destroy)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  e2e:
    runs-on: ubuntu-latest

    # Set region explicitly so aws-actions has it (your error was "Input required and not supplied: aws-region")
    env:
      AWS_REGION: us-east-1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl unzip

      # Terraform in iac/
      - name: Terraform Init
        working-directory: iac
        run: terraform init -reconfigure

      - name: Terraform Apply (create Fargate Grid)
        id: tfapply
        working-directory: iac
        run: terraform apply -auto-approve

      - name: Read outputs
        id: tfout
        working-directory: iac
        run: |
          GRID_URL="$(terraform output -raw grid_url)"
          CHROME_VNC="$(terraform output -raw novnc_chrome_url)"
          FIREFOX_VNC="$(terraform output -raw novnc_firefox_url)"
          echo "grid_url=$GRID_URL"             >> "$GITHUB_OUTPUT"
          echo "novnc_chrome_url=$CHROME_VNC"   >> "$GITHUB_OUTPUT"
          echo "novnc_firefox_url=$FIREFOX_VNC" >> "$GITHUB_OUTPUT"

      - name: Wait for Grid hub to be ready
        env:
          GRID_URL: ${{ steps.tfout.outputs.grid_url }}
        run: |
          echo "Waiting for: ${GRID_URL}"
          for i in $(seq 1 120); do
            if curl -fsS "${GRID_URL%/}/status" | jq -e '.value.ready == true' >/dev/null 2>&1; then
              echo "Grid is ready."
              exit 0
            fi
            echo "Not ready yet... ($i/120)"
            sleep 5
          done
          echo "Grid did not become ready in time. Last status:"
          curl -v "${GRID_URL%/}/status" || true
          exit 1

      - name: Run Selenium tests
        env:
          GRID_URL: ${{ steps.tfout.outputs.grid_url }}
        run: |
          echo "Using GRID_URL=${GRID_URL}"
          mvn -B -Dgrid.url="${GRID_URL}" test

      - name: Helpful URLs
        if: always()
        run: |
          echo "Hub:        ${{ steps.tfout.outputs.grid_url }}"
          echo "noVNC Chrome:  ${{ steps.tfout.outputs.novnc_chrome_url }}"
          echo "noVNC Firefox: ${{ steps.tfout.outputs.novnc_firefox_url }}"

      - name: Terraform Destroy (always)
        if: always()
        working-directory: iac
        run: terraform destroy -auto-approve

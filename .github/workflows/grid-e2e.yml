name: Grid E2E (Terraform → Tests → Destroy)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write      # required for AWS OIDC
  contents: read

concurrency:
  group: grid-e2e-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: us-east-1            # change if you use another region
  IAC_DIR: iac
  TF_STATE_KEY: selforge-grid/main/terraform.tfstate

jobs:
  apply_and_test:
    name: Terraform Apply → Wait → Maven Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Show caller identity
        run: aws sts get-caller-identity

      - name: Ensure TF state bucket & lock table exist (idempotent)
        shell: bash
        run: |
          set -euo pipefail

          if [ -z "${{ secrets.TF_STATE_BUCKET }}" ] || [ -z "${{ secrets.TF_STATE_REGION }}" ] || [ -z "${{ secrets.TF_STATE_LOCK_TABLE }}" ]; then
            echo "ERROR: TF_STATE_BUCKET / TF_STATE_REGION / TF_STATE_LOCK_TABLE must be set as repo secrets." >&2
            exit 1
          fi

          # Create S3 bucket if missing
          if ! aws s3api head-bucket --bucket "${{ secrets.TF_STATE_BUCKET }}" 2>/dev/null; then
            if [ "${{ secrets.TF_STATE_REGION }}" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "${{ secrets.TF_STATE_BUCKET }}" --region "${{ secrets.TF_STATE_REGION }}"
            else
              aws s3api create-bucket --bucket "${{ secrets.TF_STATE_BUCKET }}" --region "${{ secrets.TF_STATE_REGION }}" \
                --create-bucket-configuration LocationConstraint="${{ secrets.TF_STATE_REGION }}"
            fi
            aws s3api put-bucket-versioning --bucket "${{ secrets.TF_STATE_BUCKET }}" \
              --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "${{ secrets.TF_STATE_BUCKET }}" \
              --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          fi

          # Create DynamoDB lock table if missing
          if ! aws dynamodb describe-table --table-name "${{ secrets.TF_STATE_LOCK_TABLE }}" >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name "${{ secrets.TF_STATE_LOCK_TABLE }}" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "${{ secrets.TF_STATE_REGION }}"
            aws dynamodb wait table-exists --table-name "${{ secrets.TF_STATE_LOCK_TABLE }}" --region "${{ secrets.TF_STATE_REGION }}"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (S3 backend)
        working-directory: ${{ env.IAC_DIR }}
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ secrets.TF_STATE_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"

      # NOTE: The module under iac/ currently provisions an EC2 instance that runs Selenium Grid via Docker Compose,
      # which is perfect for your current repo. If/when you switch to ECS/Fargate, the apply and outputs stay the same.
      - name: Terraform Apply (create/refresh Grid)
        working-directory: ${{ env.IAC_DIR }}
        run: |
          set -e
          terraform apply -auto-approve \
            -var="name_prefix=selenium-grid" \
            -var='grid_cidrs=["0.0.0.0/0"]' \
            -var='ssh_cidrs=[]' \
            -var="create_key_pair=false"

      - name: Read outputs (grid_url, novnc_url)
        id: tf_out
        working-directory: ${{ env.IAC_DIR }}
        shell: bash
        run: |
          # grid_url is required; novnc_url is optional
          GRID_URL="$(terraform output -raw grid_url)"
          echo "grid_url=$GRID_URL" >> "$GITHUB_OUTPUT"

          if terraform output -raw novnc_url >/dev/null 2>&1; then
            NOVNC_URL="$(terraform output -raw novnc_url)"
            echo "novnc_url=$NOVNC_URL" >> "$GITHUB_OUTPUT"
          fi

          echo "Grid URL: $GRID_URL"
          [ -n "${NOVNC_URL:-}" ] && echo "noVNC URL: $NOVNC_URL" || true

      - name: Wait for Grid port to open
        env:
          GRID_URL: ${{ steps.tf_out.outputs.grid_url }}
        shell: bash
        run: |
          set -e
          URL="${GRID_URL%/}"
          HOST="${URL#http://}"; HOST="${HOST#https://}"; HOST="${HOST%%:*}"
          echo "Probing $HOST:4444"
          for i in $(seq 1 120); do
            if timeout 2 bash -lc "cat </dev/null > /dev/tcp/$HOST/4444" 2>/dev/null; then
              echo "Port 4444 is open."
              exit 0
            fi
            echo "Port 4444 not open yet... ($i/120)"
            sleep 5
          done
          echo "Grid port 4444 did not open in time."
          exit 1

      - name: Wait for Grid readiness (/status)
        env:
          GRID_URL: ${{ steps.tf_out.outputs.grid_url }}
        shell: bash
        run: |
          set -e
          URL="${GRID_URL%/}"
          echo "Waiting for ${URL}/status to report ready=true"
          for i in $(seq 1 180); do
            READY="$(curl -fsS "$URL/status" | jq -r '.value.ready // .ready // empty' || true)"
            if [ "$READY" = "true" ]; then
              echo "Grid is ready."
              exit 0
            fi
            echo "Not ready yet... ($i/180)"
            sleep 5
          done
          echo "Grid did not become ready in time. Last status:"
          curl -v "$URL/status" || true
          exit 1

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: m2-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            m2-${{ runner.os }}-

      - name: Run Selenium Tests (TestNG)
        env:
          GRID_URL: ${{ steps.tf_out.outputs.grid_url }}
        run: |
          # TestNG suite reads -Dgrid.url; DuckTest also falls back to env GRID_URL
          mvn -B -Dgrid.url="$GRID_URL" test

      - name: Archive surefire reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: target/surefire-reports

  destroy:
    name: Terraform Destroy (always)
    runs-on: ubuntu-latest
    needs: [apply_and_test]
    if: always()
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init (S3 backend)
        working-directory: ${{ env.IAC_DIR }}
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}" \
            -backend-config="region=${{ secrets.TF_STATE_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"

      - name: Terraform Destroy
        working-directory: ${{ env.IAC_DIR }}
        run: terraform destroy -auto-approve

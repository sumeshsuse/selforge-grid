name: Grid E2E (Terraform → Tests → Destroy)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  IAC_DIR: iac
  TF_STATE_KEY: selforge-grid/main/terraform.tfstate

jobs:
  e2e:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Who am I?
        run: aws sts get-caller-identity

      - name: Ensure remote state backend (S3 + DynamoDB)
        shell: bash
        env:
          TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
          TF_STATE_REGION: ${{ secrets.TF_STATE_REGION }}
          TF_STATE_LOCK_TABLE: ${{ secrets.TF_STATE_LOCK_TABLE }}
        run: |
          set -euo pipefail
          if [ -z "${TF_STATE_BUCKET}" ] || [ -z "${TF_STATE_REGION}" ] || [ -z "${TF_STATE_LOCK_TABLE}" ]; then
            echo "ERROR: TF_STATE_BUCKET / TF_STATE_REGION / TF_STATE_LOCK_TABLE secrets must be set." >&2
            exit 1
          fi
          if ! aws s3api head-bucket --bucket "${TF_STATE_BUCKET}" 2>/dev/null; then
            if [ "${TF_STATE_REGION}" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "${TF_STATE_BUCKET}" --region "${TF_STATE_REGION}"
            else
              aws s3api create-bucket --bucket "${TF_STATE_BUCKET}" --region "${TF_STATE_REGION}" \
                --create-bucket-configuration LocationConstraint="${TF_STATE_REGION}"
            fi
            aws s3api put-bucket-versioning --bucket "${TF_STATE_BUCKET}" --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "${TF_STATE_BUCKET}" --server-side-encryption-configuration \
              '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          fi
          if ! aws dynamodb describe-table --table-name "${TF_STATE_LOCK_TABLE}" >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name "${TF_STATE_LOCK_TABLE}" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "${TF_STATE_REGION}"
            aws dynamodb wait table-exists --table-name "${TF_STATE_LOCK_TABLE}" --region "${TF_STATE_REGION}"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.IAC_DIR }}
        env:
          TF_VAR_name_prefix: selenium-grid
          TF_VAR_instance_type: t3.large
          TF_VAR_volume_size_gb: 30
          TF_VAR_grid_cidrs: '["0.0.0.0/0"]'
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="region=${{ secrets.TF_STATE_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}" \
            -backend-config="key=${TF_STATE_KEY}"

      - name: Terraform Apply (create Grid)
        id: tfapply
        working-directory: ${{ env.IAC_DIR }}
        env:
          TF_VAR_name_prefix: selenium-grid
          TF_VAR_instance_type: t3.large
          TF_VAR_volume_size_gb: 30
          TF_VAR_grid_cidrs: '["0.0.0.0/0"]'
        run: |
          set -euo pipefail
          terraform apply -auto-approve
          terraform output -json > tf_outputs.json
          GRID_URL=$(jq -r '.grid_url.value' tf_outputs.json)
          echo "GRID_URL=${GRID_URL}" | tee -a $GITHUB_ENV
          echo "Grid URL: ${GRID_URL}"

      - name: Wait for port 4444
        env:
          GRID_URL: ${{ env.GRID_URL }}
        shell: bash
        run: |
          set -e
          URL="${GRID_URL%/}"
          HOST="${URL#http://}"; HOST="${HOST#https://}"; HOST="${HOST%%:*}"
          echo "Probing $HOST:4444"
          for i in $(seq 1 120); do
            if timeout 2 bash -lc "cat </dev/null > /dev/tcp/$HOST/4444" 2>/dev/null; then
              echo "Port 4444 is open."
              exit 0
            fi
            echo "Port 4444 not open yet... ($i/120)"
            sleep 5
          done
          echo "Grid port 4444 did not open in time."
          exit 1

      - name: Verify /status is ready
        env:
          GRID_URL: ${{ env.GRID_URL }}
        shell: bash
        run: |
          set -e
          for i in $(seq 1 60); do
            READY="$(curl -fsS "$GRID_URL/status" | jq -r '.value.ready // .ready // empty' || true)"
            if [ "$READY" = "true" ]; then
              echo "Grid is ready."
              exit 0
            fi
            echo "Grid not ready yet... ($i/60)"
            sleep 5
          done
          echo "Grid didn't report ready=true in time."
          curl -v "$GRID_URL/status" || true
          exit 1

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Maven tests (-Dgrid.url)
        env:
          GRID_URL: ${{ env.GRID_URL }}
        run: mvn -B -Dgrid.url="$GRID_URL" test

      - name: Terraform Destroy
        if: always()
        working-directory: ${{ env.IAC_DIR }}
        run: terraform destroy -auto-approve

name: Grid E2E (Fargate → Tests → Destroy)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  IAC_DIR: iac
  TF_STATE_KEY: selforge-grid/main/terraform.tfstate

jobs:
  e2e:
    runs-on: ubuntu-latest
    permissions:
      id-token: write    # for OIDC assume role
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC → assume role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I
        run: aws sts get-caller-identity

      - name: Show Terraform files used by runner
        run: |
          set -e
          echo "Listing ${{ env.IAC_DIR }}:"
          ls -la "${{ env.IAC_DIR }}"
          echo "----- main.tf (head) -----"
          sed -n '1,120p' "${{ env.IAC_DIR }}/main.tf" || true
          echo "----- main.tf (tail) -----"
          sed -n '121,999p' "${{ env.IAC_DIR }}/main.tf" || true

      - name: Ensure remote state infra (S3/Dynamo)
        shell: bash
        env:
          TF_STATE_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
          TF_STATE_REGION: ${{ secrets.TF_STATE_REGION }}
          TF_STATE_LOCK_TABLE: ${{ secrets.TF_STATE_LOCK_TABLE }}
        run: |
          set -euo pipefail
          # Create S3 bucket if missing
          if ! aws s3api head-bucket --bucket "${TF_STATE_BUCKET}" 2>/dev/null; then
            if [ "${TF_STATE_REGION}" = "${AWS_REGION}" ]; then
              aws s3api create-bucket --bucket "${TF_STATE_BUCKET}" --region "${TF_STATE_REGION}"
            else
              aws s3api create-bucket --bucket "${TF_STATE_BUCKET}" --region "${TF_STATE_REGION}" \
                --create-bucket-configuration LocationConstraint="${TF_STATE_REGION}"
            fi
            aws s3api put-bucket-versioning --bucket "${TF_STATE_BUCKET}" --versioning-configuration Status=Enabled
          fi
          # Create DynamoDB lock table if missing
          if ! aws dynamodb describe-table --table-name "${TF_STATE_LOCK_TABLE}" >/dev/null 2>&1; then
            aws dynamodb create-table \
              --table-name "${TF_STATE_LOCK_TABLE}" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "${TF_STATE_REGION}"
            aws dynamodb wait table-exists --table-name "${TF_STATE_LOCK_TABLE}" --region "${TF_STATE_REGION}"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.IAC_DIR }}
        env:
          TF_VAR_name_prefix: selenium-fargate
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="region=${{ secrets.TF_STATE_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}"

      - name: Terraform Plan (fail if EC2 appears)
        working-directory: ${{ env.IAC_DIR }}
        shell: bash
        run: |
          set -e
          terraform plan -no-color | tee plan.txt
          if grep -q 'aws_instance\.' plan.txt; then
            echo "❌ Detected aws_instance in plan (old EC2 stack). Ensure iac/main.tf is the Fargate version."
            exit 1
          fi

      - name: Terraform Apply (Fargate Grid)
        working-directory: ${{ env.IAC_DIR }}
        run: terraform apply -auto-approve

      - name: Capture Outputs (tolerant)
        id: tfout
        working-directory: ${{ env.IAC_DIR }}
        shell: bash
        run: |
          set -e
          GRID_URL="$(terraform output -raw grid_url)"
          NOVNC_URL="$(terraform output -raw novnc_url 2>/dev/null || true)"
          echo "grid_url=${GRID_URL}"   >> $GITHUB_OUTPUT
          [ -n "$NOVNC_URL" ] && echo "novnc_url=${NOVNC_URL}" >> $GITHUB_OUTPUT || true
          echo "Grid URL: $GRID_URL"
          [ -n "$NOVNC_URL" ] && echo "noVNC URL: $NOVNC_URL" || echo "noVNC URL not defined"

      - name: Wait for ALB:80 and /status
        env:
          GRID_URL: ${{ steps.tfout.outputs.grid_url }}
        shell: bash
        run: |
          set -e
          URL="${GRID_URL%/}"
          HOST="${URL#http://}"; HOST="${HOST#https://}"; HOST="${HOST%%/*}"; HOST="${HOST%%:*}"
          echo "Probing $HOST:80 ..."
          for i in $(seq 1 120); do
            if timeout 2 bash -lc "cat </dev/null > /dev/tcp/$HOST/80" 2>/dev/null; then
              echo "Port 80 is open."
              break
            fi
            echo "Port 80 not open yet... ($i/120)"
            sleep 5
          done
          echo "Waiting for /status to be healthy..."
          for i in $(seq 1 120); do
            if curl -fsS "$URL/status" | jq -e '.value.ready == true' >/dev/null 2>&1; then
              echo "Selenium is ready."
              exit 0
            fi
            echo "Not ready yet... ($i/120)"
            sleep 5
          done
          echo "Grid did not become ready in time."
          curl -v "$URL/status" || true
          exit 1

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Maven Tests (point to Fargate Grid)
        env:
          GRID_URL: ${{ steps.tfout.outputs.grid_url }}
        # Write allure results where the plugin expects them
        run: mvn -B -Dgrid.url="$GRID_URL" -Dallure.results.directory=target/allure-results test

      # --- Allure HTML build & S3 publish ------------------------------------

      - name: Build Allure HTML
        # Explicitly tell the plugin where results are
        run: mvn -B -Dallure.results.directory=target/allure-results io.qameta.allure:allure-maven:report

      - name: Publish Allure to S3 (versioned + latest)
        env:
          BUCKET: ${{ secrets.REPORTS_BUCKET }}
          RUN_PREFIX: grid/allure/${{ github.run_id }}-${{ github.run_attempt }}
        shell: bash
        run: |
          set -e
          if [ -z "${BUCKET}" ]; then
            echo "ℹ️ REPORTS_BUCKET not set; skipping S3 publish."
            exit 0
          fi

          SRC="target/site/allure-maven"
          if [ ! -d "$SRC" ]; then
            echo "❌ Allure report folder not found: $SRC"
            echo "Did tests write to target/allure-results?"
            exit 1
          fi

          # versioned path for traceability
          aws s3 sync "$SRC" "s3://$BUCKET/$RUN_PREFIX" \
            --delete --cache-control "no-cache" --metadata-directive REPLACE

          # rolling "latest" pointer
          aws s3 sync "$SRC" "s3://$BUCKET/grid/allure/latest" \
            --delete --cache-control "no-cache" --metadata-directive REPLACE

          VER_URL="s3://$BUCKET/$RUN_PREFIX/index.html"
          LATEST_URL="s3://$BUCKET/grid/allure/latest/index.html"
          echo "Versioned report: $VER_URL"
          echo "Latest report:    $LATEST_URL"

          {
            echo "## Allure report"
            echo ""
            echo "- Versioned: \`$VER_URL\`"
            echo "- Latest: \`$LATEST_URL\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload Allure HTML as artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-html
          path: target/site/allure-maven
          if-no-files-found: warn
          retention-days: 7

      # -----------------------------------------------------------------------

      - name: Always destroy infra
        if: always()
        working-directory: ${{ env.IAC_DIR }}
        run: terraform destroy -auto-approve
